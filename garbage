# **Ambiente de Desenvolvimento**

### Build e Testes
<a href="https://gitlab.nexxera.com/traducao/python/parati-citibank-pagamento/commits/master"><img alt="build status" src="https://gitlab.nexxera.com/traducao/python/parati-citibank-pagamento/badges/master/build.svg" /></a>
<a href="https://gitlab.nexxera.com/traducao/python/parati-citibank-pagamento/commits/master"><img alt="coverage report" src="https://gitlab.nexxera.com/traducao/python/parati-citibank-pagamento/badges/master/coverage.svg" /></a>

# Principais Informações do Projeto
- Cliente: Parati
- Parceiro: Citibank
- Serviço: Pagamento
- Fluxo: Remessa / Retorno
- Analista:
    - Matheus Furtado;
    - Rodrigo Santos;
- Programador:
    - Matheus Furtado;
    - Leandro Pieper Nunes;
- Jira:
    - <a href="https://jira.nexxera.com/browse/TRAD-6101">TRAD-6101</a>
    - <a href="https://jira.nexxera.com/browse/TRAD-6699">TRAD-6699</a>
    - <a href="https://jira.nexxera.com/browse/TRAD-6813">TRAD-6813</a>
- Descrição:

# Fluxos

## Remessa
```
- principal_parati_citibank_pagamento.py citibank-pagamento-remessa-600-v09-salvar-traduzir-referencia <entrada> <saida>
```
## Retorno
```
- principal_parati_citibank_pagamento.py citibank-pagamento-retorno-500-v1503-capturar-traduzir-referencia: <entrada> <saida>
- principal_parati_citibank_pagamento.py citibank-pagamento-retorno-v1503-salvar-registros-parati-base <entrada> <saida>
- principal_parati_citibank_pagamento.py febraban-extrato-240-v101-conciliar-gerar-parati <entrada> <saida>
```

## Limpeza Base
```
- principal_parati_citibank_pagamento.py expurgar-base-por-quantidade-de-dias <quantidade_dias> ou -1 para limpar toda base
- principal_parati_citibank_pagamento.py citibank-pagamento-retorno-v1503-expurgar-base-parati <quantidade_dias> ou -1 para limpar toda base
```

# Ambiente de Desenvolvimento

## Requisitos
- Python 3.6
- VirtualEnv
- Make

## Ambiente Linux
Criar virtualenv dentro do projeto:
```
virtualenv -p /usr/bin/python3.6 .venv
ou
make venv
```

Ativar virtualenv:
```
source .venv/bin/activate
```

## Ambiente Windows
Criar diretório da virtualenv dentro do projeto:
```
mkdir .venv
```

Criar virtualenv:
```
virtualenv.exe .venv
```

Ativar virtualenv:
```
.venv\Scripts\activate
```

# Testes
Efetuar o download do projeto:
```
git clone git@gitlab.nexxera.com:traducao/python/parati-citibank-pagamento.git
```

Instalar as dependências:
```
make init
```

Efetuar teste na regra de negócio:
```
make test
```

Efetuar teste de cobertura de código:
```
make test-cov
```

Efetuar teste de convenção de código:
```
make code-convention
```

Limpar os dados gerados pelos testes:
```
make clean
```

Executar multiplos passos: clean test test-cov code-convention
```
make new
```

Executar multiplos passos: init new
```
make all
```

[coverage:run]
omit = test/*, .venv/*, principal*, *__init__.py

[coverage:html]
directory = reports/coverage

[coverage:report]
fail_under = 100

[flake8]
exclude = .venv
max-line-length = 120

[pycodestyle]
exclude = .venv
max-line-length = 120

.PHONY: test
.DEFAULT_GOAL: test

venv:
	virtualenv -p /usr/bin/python3.6 .venv

init:
	pip install -r requirements.txt

test:
	find test/*/* -name "*teste" -type f -delete
	pytest -v

test-cov:
	find test/*/* -name "*teste" -type f -delete
	pytest -v --cov=. --cov-report=term --cov-report=html

code-convention:
	flake8
	pycodestyle

clean:
	find test/*/* -name "*teste" -type f -delete
	rm -rf .coverage .pytest_cache reports

cache-clean:
	find . -name "*.pyc" -delete
	find . -type d -name __pycache__ -delete


new: cache-clean clean test test-cov code-convention

all: init new

.idea/
.vscode/
.pytest_cache/
.venv/
.coverage
reports/
log/
nsa/
*.test*
**/__pycache__/
*.sh
*.zip
*.mdc
*.bc
